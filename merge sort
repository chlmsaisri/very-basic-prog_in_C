#include <stdio.h>

#define MAX_SIZE 100

void merge(int arr[], int lb, int mid, int ub);
void mergeSort(int arr[], int lb, int ub);

void merge(int arr[], int lb, int mid, int ub) {
    int i = lb, j = mid + 1, k = lb;
    int b[MAX_SIZE]; // Temporary array for merging

    while (i <= mid && j <= ub) {
        if (arr[i] <= arr[j]) {
            b[k] = arr[i];
            i++;
        } else {
            b[k] = arr[j];
            j++;
        }
        k++;
    }

    // Copy the remaining elements from the first subarray
    while (i <= mid) {
        b[k] = arr[i];
        i++;
        k++;
    }

    // Copy the remaining elements from the second subarray
    while (j <= ub) {
        b[k] = arr[j];
        j++;
        k++;
    }

    // Copy the merged elements back to the original array
    for (k = lb; k <= ub; k++) {
        arr[k] = b[k];
    }
}

void mergeSort(int arr[], int lb, int ub) {
    if (lb < ub) {
        int mid = (lb + ub) / 2;

        // Sort the first half
        mergeSort(arr, lb, mid);

        // Sort the second half
        mergeSort(arr, mid + 1, ub);

        // Merge the two sorted halves
        merge(arr, lb, mid, ub);
    }
}

int main() {
    int arr[MAX_SIZE];
    int n, i;

    printf("Enter the number of elements: ");
    scanf("%d", &n);

    printf("Enter the elements:\n");
    for (i = 0; i < n; i++) {
        scanf("%d", &arr[i]);
    }

    printf("Original array: ");
    for (i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");

    mergeSort(arr, 0, n - 1);

    printf("Sorted array: ");
    for (i = 0; i < n; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");

    return 0;
}
